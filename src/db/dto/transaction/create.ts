import { transaction } from "@/db/schema";
import { autoGeneratedColumns } from "@/db/utils/shared";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const insertTransactionSchema =
  createInsertSchema(transaction).omit(autoGeneratedColumns);

export const transactionInputSchema = z.object({
  categoryId: z.string().min(1, "Category is required"),
  date: z
    .string()
    .refine((date) => !Number.isNaN(Date.parse(date)), "Invalid date format"),
  amount: z
    .string()
    .refine(
      (val) =>
        !Number.isNaN(Number.parseFloat(val)) && Number.parseFloat(val) > 0,
      "Amount must be a positive number",
    ),
  description: z.string().nullable().optional(),
  type: z.enum(["MONEY_IN", "MONEY_OUT"]),
});

export const createTransactionSchema = transactionInputSchema;
export const updateTransactionSchema = transactionInputSchema.partial();

export type CreateTransactionDto = z.infer<typeof createTransactionSchema>;
export type UpdateTransactionDto = z.infer<typeof updateTransactionSchema>;

export type {
  CreateReconciliationDto,
  UpdateReconciliationDto,
} from "../reconciliation/create";
