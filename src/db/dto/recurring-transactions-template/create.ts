// db/dto/recurring-transaction-template/create.ts
import { recurringTransactionTemplate } from "@/db/schema";
import { autoGeneratedColumns } from "@/db/utils/shared";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const insertRecurringTransactionTemplateSchema = createInsertSchema(
  recurringTransactionTemplate,
).omit(autoGeneratedColumns);

// Base schema for input, shared by create and update
export const recurringTransactionTemplateInputSchema = z.object({
  categoryId: z.string().min(1, "Category is required"),
  amount: z
    .string()
    .refine(
      (val) =>
        !Number.isNaN(Number.parseFloat(val)) && Number.parseFloat(val) > 0,
      "Amount must be a positive number",
    ),
  description: z.string().nullable().optional(),
  frequency: z.enum(["DAILY", "WEEKLY", "MONTHLY", "YEARLY", "CUSTOM"]),
  interval: z.number().int().min(1).default(1),
  startDate: z
    .string()
    .refine((date) => !Number.isNaN(Date.parse(date)), "Invalid date format"),
  endDate: z
    .string()
    .refine(
      (date) => !date || !Number.isNaN(Date.parse(date)),
      "Invalid date format",
    )
    .nullable()
    .optional(),
  weekDays: z.array(z.number().int().min(0).max(6)).nullable().optional(),
  monthDay: z.number().int().min(1).max(31).nullable().optional(),
  customPattern: z.record(z.any()).nullable().optional(), // For custom recurrence logic
  isActive: z.boolean().default(true).optional(),
  isFixed: z.boolean().default(true).optional(),
});

export const createRecurringTransactionTemplateSchema =
  recurringTransactionTemplateInputSchema;
export const updateRecurringTransactionTemplateSchema =
  recurringTransactionTemplateInputSchema.partial();

export type CreateRecurringTransactionTemplateDto = z.infer<
  typeof createRecurringTransactionTemplateSchema
>;
export type UpdateRecurringTransactionTemplateDto = z.infer<
  typeof updateRecurringTransactionTemplateSchema
>;
